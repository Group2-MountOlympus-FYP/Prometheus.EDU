from flask import Blueprint, redirect,request, jsonify, session, make_response
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, DateField, SelectField, BooleanField
from wtforms.validators import InputRequired, EqualTo, Email
from flask_wtf.csrf import generate_csrf
from werkzeug.security import generate_password_hash

from .User import *


from .ActivityLog import ActivityLog
from .decorator import login_required
login_bp = Blueprint('login', __name__)


class LoginForm(FlaskForm):
    username = StringField('Username', validators=[InputRequired()])
    password = PasswordField('Password', validators=[InputRequired()])
    remember = BooleanField('Remember Me')


@login_bp.route('/get_csrf', methods=['GET'])
def get_csrf():
    """
    Get CSRF Token
    ---
    tags:
      - Authentication
    summary: Retrieve a CSRF token for secure form submissions
    description: |
      This endpoint generates and returns a CSRF token that can be used in subsequent requests
      to protected resources. Clients should include this token in the `csrf_token` parameter
      of their form data or request headers.
    responses:
      200:
        description: Successfully retrieved CSRF token
        schema:
          type: object
          properties:
            csrf_token:
              type: string
              description: A unique token to protect against CSRF attacks
    examples:
      application/json:
        csrf_token: "generated_csrf_token_value"
    """
    # 为客户端生成一个 CSRF Token
    csrf_token = generate_csrf()
    return jsonify({"csrf_token": csrf_token})


@login_bp.route('', methods=['POST'])
def login():
    """
    User Login
    ---
    tags:
      - Authentication
    summary: User login endpoint
    description: |
      This endpoint allows a user to log in by providing their username and password.
      A valid CSRF token must also be included in the request to ensure the request
      is not forged. If the credentials are valid and the user is not banned, a session
      is created or a persistent cookie is set if `remember` is true.
    parameters:
      - name: username
        in: formData
        type: string
        required: true
        description: The username of the user.
      - name: password
        in: formData
        type: string
        required: true
        description: The user's password.
      - name: remember
        in: formData
        type: boolean
        required: false
        description: Whether to remember the user for a longer session duration.
      - name: csrf_token
        in: formData
        type: string
        required: true
        description: A unique CSRF token generated by the server.
    responses:
      200:
        description: Successfully logged in
        schema:
          type: object
          properties:
            id:
              type: integer
              description: The user's unique ID
        examples:
          application/json:
            id: 1
      401:
        description: Authentication failed
        schema:
          type: object
          properties:
            message:
              type: string
              description: Error message indicating why authentication failed
        examples:
          application/json:
            message: "WRONG PASSWORD!!!"
      403:
        description: User banned
        schema:
          type: object
          properties:
            message:
              type: string
              description: Message indicating that the user is banned
        examples:
          application/json:
            message: "YOU ARE BANNED!!!"
    """
    form = LoginForm(request.form)
    print(form.errors)
    if form.validate_on_submit():

        u = User.authenticate(username=form.username.data, password=form.password.data)
        if u and not u.status == UserStatus.BANNED:
            ActivityLog.log_login(u.id)
            if form.remember.data:
                resp = make_response(jsonify({"id": u.id}))
                resp.set_cookie('id', str(u.id), max_age=30 * 24 * 3600)  # 设置一个月的 Cookie
                return resp
            else:
                session['id'] = u.id
                return jsonify({"id": u.id})
        else:
            if u and u.status == UserStatus.BANNED:
                return jsonify({"message": "YOU ARE BANNED!!!"})
            return jsonify({"message": "WRONG PASSWORD!!!"})
    return jsonify({"error": "form is not valid"}), 400


class RegistrationForm(FlaskForm):
    username = StringField('Username', validators=[InputRequired()])
    birthdate = DateField('Birthdate', format='%Y-%m-%d', validators=[InputRequired()])
    gender = SelectField('Gender', choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')],
                         validators=[InputRequired()])
    password = PasswordField('Password', validators=[InputRequired()])


@login_bp.route('/register', methods=['POST'])
def register():
    """
        用户注册
        ---
        tags:
          - Authentication
        summary: User registration endpoint
        description: |
          该接口允许用户通过提交表单数据完成注册，包含用户名、出生日期、性别以及密码等字段。
          如果使用了 Flask-WTF CSRF 防护，需要在表单中包含有效的 CSRF token。
        parameters:
          - name: username
            in: formData
            type: string
            required: true
            description: 用户名
          - name: birthdate
            in: formData
            type: string
            format: date
            required: true
            description: 出生日期 (YYYY-MM-DD)
          - name: gender
            in: formData
            type: string
            enum: [male,female,other]
            required: true
            description: 性别
          - name: password
            in: formData
            type: string
            format: password
            required: true
            description: 用户密码
          - name: csrf_token
            in: formData
            type: string
            required: true
            description: CSRF token（若开启了 Flask-WTF CSRF）
        responses:
          302:
            description: 注册成功后重定向至首页
          400:
            description: 注册表单验证失败或缺少必要字段
            schema:
              type: object
              properties:
                form:
                  type: object
                  description: 包含表单验证后的错误信息或数据
            examples:
              application/json:
                form: {"username": "someuser", "errors": ["Missing password"]}
        """
    form = RegistrationForm()
    if form.validate_on_submit():
        print(form.data)
        if form.password.data:
            new_user = User(
                username=form.username.data,
                birthdate=form.birthdate.data,
                gender=form.gender.data,
                avatar=None,
                password_hash=generate_password_hash(form.password.data, method='pbkdf2:sha256', salt_length=8)
            )
            new_user.addUser()
            ActivityLog.log_register(new_user.id)

            return jsonify({"id": new_user.id})
    return "form is not valid", 401


@login_bp.route('/verify-username', methods=['POST'])
def verifyUsername():
    """
        验证用户名是否已被占用
        ---
        tags:
          - Authentication
        summary: Verify if the username is already taken
        description: |
          该接口允许用户验证某个用户名是否已被占用。
          用户通过提交用户名，系统将返回用户名是否已被占用的信息。
        parameters:
          - name: username
            in: formData
            type: string
            required: true
            description: 需要验证的用户名
        responses:
          200:
            description: 返回用户名是否被占用
            schema:
              type: object
              properties:
                Occupied:
                  type: boolean
                  description: 用户名是否被占用
            examples:
              application/json:
                Occupied: false  # 用户名未被占用
          400:
            description: 提交的用户名为空或无效
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: 错误信息
            examples:
              application/json:
                message: "Invalid username or empty field"
        """
    username = request.form.get('username')
    print(username)

    if User.userNameIsNotOccupied(username):
        data = {
            'Occupied': False
        }
        return jsonify(data)
    else:
        data = {
            'Occupied': True
        }

        return jsonify(data)


@login_bp.route('/get_session')
@login_required
def give_session():
    """
        获取当前会话的用户 ID
        ---
        tags:
          - Authentication
        summary: Retrieve the current session ID
        description: |
          该接口用于获取当前会话的用户 ID。如果用户未登录或会话没有存储用户 ID，默认返回 -1。
        responses:
          200:
            description: 返回当前会话的用户 ID
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: 当前会话的用户 ID
            examples:
              application/json:
                id: -1  # 默认值，表示未登录
        """
    return jsonify({'id': session.get('id', -1)})


@login_bp.route('/delete_cookie')
def delete_cookie():
    """
        删除当前用户的 Cookie 并清除会话
        ---
        tags:
          - Authentication
        summary: Delete the user's cookie and clear the session
        description: |
          该接口允许用户退出登录，删除存储在浏览器中的 `id` Cookie，并清除当前会话数据。
        responses:
          302:
            description: 成功删除 Cookie 后重定向到首页
            headers:
              Location:
                type: string
                description: 重定向目标 URL
                example: "/"
          500:
            description: 内部服务器错误
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: 错误信息
            examples:
              application/json:
                message: "Error during logout process"
        """
    ActivityLog.log_logout(session.get('id'))
    resp = make_response()
    resp.delete_cookie('id')
    session.clear()
    return resp


@login_bp.route('/get_user_name_by_session', methods=['GET'])
@login_required
def get_user_name_by_session():
    """
        根据会话获取当前登录用户的用户名
        ---
        tags:
          - Authentication
        summary: Retrieve the username based on the current session
        description: |
          该接口通过会话中的用户 ID 获取当前用户的用户名。如果用户没有登录（ID 为 -1），返回 401 错误。
        responses:
          200:
            description: 返回当前用户的用户名
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 当前登录用户的用户名
            examples:
              application/json:
                username: "john_doe"
          401:
            description: 用户未登录
            schema:
              type: object
              properties:
                error:
                  type: string
                  description: 错误信息
            examples:
              application/json:
                error: "User not logged in"
          404:
            description: 用户不存在
            schema:
              type: object
              properties:
                error:
                  type: string
                  description: 错误信息
            examples:
              application/json:
                error: "User not found"
        """

    return jsonify(User.getUserById(session["id"]).username)


@login_bp.route('/get_user_name_by_id', methods=['POST'])
def get_user_name_by_id():
    """
        根据用户 ID 获取用户名
        ---
        tags:
          - Authentication
        summary: Retrieve the username based on user ID
        description: |
          该接口允许通过用户的 ID 获取用户名。如果 ID 无效或用户不存在，返回相应的错误信息。
        parameters:
          - name: id
            in: body
            type: integer
            required: true
            description: 需要查询的用户 ID
        responses:
          200:
            description: 返回查询到的用户名
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 用户名
            examples:
              application/json:
                username: "john_doe"
          401:
            description: 用户 ID 无效或未登录
            schema:
              type: object
              properties:
                error:
                  type: string
                  description: 错误信息
            examples:
              application/json:
                error: "User not logged in"
          404:
            description: 用户不存在
            schema:
              type: object
              properties:
                error:
                  type: string
                  description: 错误信息
            examples:
              application/json:
                error: "User not found"
        """
    id = int(request.get_data(as_text=True))

    if id:
        u = User.getUserById(id)

        if u:
            return jsonify(username=u.username)
        else:
            return jsonify(error="User not found"), 404
    else:
        return jsonify(error="User not logged in"), 401
